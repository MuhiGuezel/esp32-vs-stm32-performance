
NUCLEO-L476RG-Standby.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016a0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001828  08001828  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001828  08001828  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001828  08001828  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001828  08001828  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001828  08001828  00002828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800182c  0800182c  0000282c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001830  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000000c  0800183c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  0800183c  00003050  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b55  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e5  00000000  00000000  00009b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000535  00000000  00000000  0000b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001486  00000000  00000000  0000bbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082d3  00000000  00000000  0000d03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e91d7  00000000  00000000  0001530e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fe4e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b00  00000000  00000000  000fe528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00100028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001810 	.word	0x08001810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001810 	.word	0x08001810

080001c8 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
    HAL_Init();
 80001cc:	f000 f944 	bl	8000458 <HAL_Init>
    MX_RTC_Init();
 80001d0:	f000 f824 	bl	800021c <MX_RTC_Init>

    if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB)) {
 80001d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000208 <main+0x40>)
 80001d6:	691b      	ldr	r3, [r3, #16]
 80001d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d006      	beq.n	80001ee <main+0x26>
        __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // Flag l√∂schen nach STANDBY
 80001e0:	4b09      	ldr	r3, [pc, #36]	@ (8000208 <main+0x40>)
 80001e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80001e6:	619a      	str	r2, [r3, #24]
        HAL_Delay(100);  // Kurze Debug-Zeit
 80001e8:	2064      	movs	r0, #100	@ 0x64
 80001ea:	f000 f9b1 	bl	8000550 <HAL_Delay>
    }

    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80001ee:	4807      	ldr	r0, [pc, #28]	@ (800020c <main+0x44>)
 80001f0:	f001 fa84 	bl	80016fc <HAL_RTCEx_DeactivateWakeUpTimer>
    HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 10, RTC_WAKEUPCLOCK_CK_SPRE_16BITS);
 80001f4:	2204      	movs	r2, #4
 80001f6:	210a      	movs	r1, #10
 80001f8:	4804      	ldr	r0, [pc, #16]	@ (800020c <main+0x44>)
 80001fa:	f001 f9eb 	bl	80015d4 <HAL_RTCEx_SetWakeUpTimer_IT>

    HAL_PWR_EnterSTANDBYMode();  // Neustart nach Wakeup
 80001fe:	f000 fab1 	bl	8000764 <HAL_PWR_EnterSTANDBYMode>
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	bd80      	pop	{r7, pc}
 8000208:	40007000 	.word	0x40007000
 800020c:	20000028 	.word	0x20000028

08000210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000214:	b672      	cpsid	i
}
 8000216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000218:	bf00      	nop
 800021a:	e7fd      	b.n	8000218 <Error_Handler+0x8>

0800021c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000230:	2300      	movs	r3, #0
 8000232:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000234:	4b25      	ldr	r3, [pc, #148]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000236:	4a26      	ldr	r2, [pc, #152]	@ (80002d0 <MX_RTC_Init+0xb4>)
 8000238:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800023a:	4b24      	ldr	r3, [pc, #144]	@ (80002cc <MX_RTC_Init+0xb0>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000240:	4b22      	ldr	r3, [pc, #136]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000242:	227f      	movs	r2, #127	@ 0x7f
 8000244:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000246:	4b21      	ldr	r3, [pc, #132]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000248:	22ff      	movs	r2, #255	@ 0xff
 800024a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800024c:	4b1f      	ldr	r3, [pc, #124]	@ (80002cc <MX_RTC_Init+0xb0>)
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000252:	4b1e      	ldr	r3, [pc, #120]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000254:	2200      	movs	r2, #0
 8000256:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000258:	4b1c      	ldr	r3, [pc, #112]	@ (80002cc <MX_RTC_Init+0xb0>)
 800025a:	2200      	movs	r2, #0
 800025c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800025e:	4b1b      	ldr	r3, [pc, #108]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000260:	2200      	movs	r2, #0
 8000262:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000264:	4819      	ldr	r0, [pc, #100]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000266:	f000 ff53 	bl	8001110 <HAL_RTC_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000270:	f7ff ffce 	bl	8000210 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000274:	2300      	movs	r3, #0
 8000276:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000278:	2300      	movs	r3, #0
 800027a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800027c:	2300      	movs	r3, #0
 800027e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000280:	2300      	movs	r3, #0
 8000282:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	2201      	movs	r2, #1
 800028c:	4619      	mov	r1, r3
 800028e:	480f      	ldr	r0, [pc, #60]	@ (80002cc <MX_RTC_Init+0xb0>)
 8000290:	f000 ffc6 	bl	8001220 <HAL_RTC_SetTime>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800029a:	f7ff ffb9 	bl	8000210 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800029e:	2301      	movs	r3, #1
 80002a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80002a2:	2301      	movs	r3, #1
 80002a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80002a6:	2301      	movs	r3, #1
 80002a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80002ae:	463b      	mov	r3, r7
 80002b0:	2201      	movs	r2, #1
 80002b2:	4619      	mov	r1, r3
 80002b4:	4805      	ldr	r0, [pc, #20]	@ (80002cc <MX_RTC_Init+0xb0>)
 80002b6:	f001 f850 	bl	800135a <HAL_RTC_SetDate>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80002c0:	f7ff ffa6 	bl	8000210 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80002c4:	bf00      	nop
 80002c6:	3718      	adds	r7, #24
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000028 	.word	0x20000028
 80002d0:	40002800 	.word	0x40002800

080002d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b0a4      	sub	sp, #144	@ 0x90
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002dc:	f107 0308 	add.w	r3, r7, #8
 80002e0:	2288      	movs	r2, #136	@ 0x88
 80002e2:	2100      	movs	r1, #0
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 fa66 	bl	80017b6 <memset>
  if(rtcHandle->Instance==RTC)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a10      	ldr	r2, [pc, #64]	@ (8000330 <HAL_RTC_MspInit+0x5c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d118      	bne.n	8000326 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80002f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80002f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80002fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80002fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	f107 0308 	add.w	r3, r7, #8
 8000306:	4618      	mov	r0, r3
 8000308:	f000 fa46 	bl	8000798 <HAL_RCCEx_PeriphCLKConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000312:	f7ff ff7d 	bl	8000210 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000316:	4b07      	ldr	r3, [pc, #28]	@ (8000334 <HAL_RTC_MspInit+0x60>)
 8000318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800031c:	4a05      	ldr	r2, [pc, #20]	@ (8000334 <HAL_RTC_MspInit+0x60>)
 800031e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000322:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000326:	bf00      	nop
 8000328:	3790      	adds	r7, #144	@ 0x90
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40002800 	.word	0x40002800
 8000334:	40021000 	.word	0x40021000

08000338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800033e:	4b0f      	ldr	r3, [pc, #60]	@ (800037c <HAL_MspInit+0x44>)
 8000340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000342:	4a0e      	ldr	r2, [pc, #56]	@ (800037c <HAL_MspInit+0x44>)
 8000344:	f043 0301 	orr.w	r3, r3, #1
 8000348:	6613      	str	r3, [r2, #96]	@ 0x60
 800034a:	4b0c      	ldr	r3, [pc, #48]	@ (800037c <HAL_MspInit+0x44>)
 800034c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800034e:	f003 0301 	and.w	r3, r3, #1
 8000352:	607b      	str	r3, [r7, #4]
 8000354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000356:	4b09      	ldr	r3, [pc, #36]	@ (800037c <HAL_MspInit+0x44>)
 8000358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800035a:	4a08      	ldr	r2, [pc, #32]	@ (800037c <HAL_MspInit+0x44>)
 800035c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000360:	6593      	str	r3, [r2, #88]	@ 0x58
 8000362:	4b06      	ldr	r3, [pc, #24]	@ (800037c <HAL_MspInit+0x44>)
 8000364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800036a:	603b      	str	r3, [r7, #0]
 800036c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40021000 	.word	0x40021000

08000380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000384:	bf00      	nop
 8000386:	e7fd      	b.n	8000384 <NMI_Handler+0x4>

08000388 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <HardFault_Handler+0x4>

08000390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <MemManage_Handler+0x4>

08000398 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <BusFault_Handler+0x4>

080003a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <UsageFault_Handler+0x4>

080003a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr

080003b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003b6:	b480      	push	{r7}
 80003b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	46bd      	mov	sp, r7
 80003be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c2:	4770      	bx	lr

080003c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr

080003d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d6:	f000 f89b 	bl	8000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
	...

080003e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <SystemInit+0x20>)
 80003e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003ea:	4a05      	ldr	r2, [pc, #20]	@ (8000400 <SystemInit+0x20>)
 80003ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	e000ed00 	.word	0xe000ed00

08000404 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000404:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800043c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000408:	f7ff ffea 	bl	80003e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800040c:	480c      	ldr	r0, [pc, #48]	@ (8000440 <LoopForever+0x6>)
  ldr r1, =_edata
 800040e:	490d      	ldr	r1, [pc, #52]	@ (8000444 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000410:	4a0d      	ldr	r2, [pc, #52]	@ (8000448 <LoopForever+0xe>)
  movs r3, #0
 8000412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000414:	e002      	b.n	800041c <LoopCopyDataInit>

08000416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800041a:	3304      	adds	r3, #4

0800041c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800041c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000420:	d3f9      	bcc.n	8000416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000422:	4a0a      	ldr	r2, [pc, #40]	@ (800044c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000424:	4c0a      	ldr	r4, [pc, #40]	@ (8000450 <LoopForever+0x16>)
  movs r3, #0
 8000426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000428:	e001      	b.n	800042e <LoopFillZerobss>

0800042a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800042a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800042c:	3204      	adds	r2, #4

0800042e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000430:	d3fb      	bcc.n	800042a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000432:	f001 f9c9 	bl	80017c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000436:	f7ff fec7 	bl	80001c8 <main>

0800043a <LoopForever>:

LoopForever:
    b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800043c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000440:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000444:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000448:	08001830 	.word	0x08001830
  ldr r2, =_sbss
 800044c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000450:	20000050 	.word	0x20000050

08000454 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000454:	e7fe      	b.n	8000454 <ADC1_2_IRQHandler>
	...

08000458 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800045e:	2300      	movs	r3, #0
 8000460:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_Init+0x3c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a0b      	ldr	r2, [pc, #44]	@ (8000494 <HAL_Init+0x3c>)
 8000468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800046c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800046e:	2003      	movs	r0, #3
 8000470:	f000 f944 	bl	80006fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000474:	2000      	movs	r0, #0
 8000476:	f000 f80f 	bl	8000498 <HAL_InitTick>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d002      	beq.n	8000486 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000480:	2301      	movs	r3, #1
 8000482:	71fb      	strb	r3, [r7, #7]
 8000484:	e001      	b.n	800048a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000486:	f7ff ff57 	bl	8000338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800048a:	79fb      	ldrb	r3, [r7, #7]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40022000 	.word	0x40022000

08000498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004a0:	2300      	movs	r3, #0
 80004a2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80004a4:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <HAL_InitTick+0x6c>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d023      	beq.n	80004f4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80004ac:	4b16      	ldr	r3, [pc, #88]	@ (8000508 <HAL_InitTick+0x70>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b14      	ldr	r3, [pc, #80]	@ (8000504 <HAL_InitTick+0x6c>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80004be:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f941 	bl	800074a <HAL_SYSTICK_Config>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10f      	bne.n	80004ee <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d809      	bhi.n	80004e8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d4:	2200      	movs	r2, #0
 80004d6:	6879      	ldr	r1, [r7, #4]
 80004d8:	f04f 30ff 	mov.w	r0, #4294967295
 80004dc:	f000 f919 	bl	8000712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80004e0:	4a0a      	ldr	r2, [pc, #40]	@ (800050c <HAL_InitTick+0x74>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	6013      	str	r3, [r2, #0]
 80004e6:	e007      	b.n	80004f8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80004e8:	2301      	movs	r3, #1
 80004ea:	73fb      	strb	r3, [r7, #15]
 80004ec:	e004      	b.n	80004f8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
 80004f0:	73fb      	strb	r3, [r7, #15]
 80004f2:	e001      	b.n	80004f8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80004f4:	2301      	movs	r3, #1
 80004f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000008 	.word	0x20000008
 8000508:	20000000 	.word	0x20000000
 800050c:	20000004 	.word	0x20000004

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <HAL_IncTick+0x20>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <HAL_IncTick+0x24>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	4a04      	ldr	r2, [pc, #16]	@ (8000534 <HAL_IncTick+0x24>)
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000008 	.word	0x20000008
 8000534:	2000004c 	.word	0x2000004c

08000538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return uwTick;
 800053c:	4b03      	ldr	r3, [pc, #12]	@ (800054c <HAL_GetTick+0x14>)
 800053e:	681b      	ldr	r3, [r3, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000004c 	.word	0x2000004c

08000550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000558:	f7ff ffee 	bl	8000538 <HAL_GetTick>
 800055c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000568:	d005      	beq.n	8000576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800056a:	4b0a      	ldr	r3, [pc, #40]	@ (8000594 <HAL_Delay+0x44>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	461a      	mov	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	4413      	add	r3, r2
 8000574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000576:	bf00      	nop
 8000578:	f7ff ffde 	bl	8000538 <HAL_GetTick>
 800057c:	4602      	mov	r2, r0
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	68fa      	ldr	r2, [r7, #12]
 8000584:	429a      	cmp	r2, r3
 8000586:	d8f7      	bhi.n	8000578 <HAL_Delay+0x28>
  {
  }
}
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000008 	.word	0x20000008

08000598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f003 0307 	and.w	r3, r3, #7
 80005a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a8:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005b4:	4013      	ands	r3, r2
 80005b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ca:	4a04      	ldr	r2, [pc, #16]	@ (80005dc <__NVIC_SetPriorityGrouping+0x44>)
 80005cc:	68bb      	ldr	r3, [r7, #8]
 80005ce:	60d3      	str	r3, [r2, #12]
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000ed00 	.word	0xe000ed00

080005e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e4:	4b04      	ldr	r3, [pc, #16]	@ (80005f8 <__NVIC_GetPriorityGrouping+0x18>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	0a1b      	lsrs	r3, r3, #8
 80005ea:	f003 0307 	and.w	r3, r3, #7
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	6039      	str	r1, [r7, #0]
 8000606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060c:	2b00      	cmp	r3, #0
 800060e:	db0a      	blt.n	8000626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	490c      	ldr	r1, [pc, #48]	@ (8000648 <__NVIC_SetPriority+0x4c>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	0112      	lsls	r2, r2, #4
 800061c:	b2d2      	uxtb	r2, r2
 800061e:	440b      	add	r3, r1
 8000620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000624:	e00a      	b.n	800063c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	b2da      	uxtb	r2, r3
 800062a:	4908      	ldr	r1, [pc, #32]	@ (800064c <__NVIC_SetPriority+0x50>)
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f003 030f 	and.w	r3, r3, #15
 8000632:	3b04      	subs	r3, #4
 8000634:	0112      	lsls	r2, r2, #4
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	440b      	add	r3, r1
 800063a:	761a      	strb	r2, [r3, #24]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000650:	b480      	push	{r7}
 8000652:	b089      	sub	sp, #36	@ 0x24
 8000654:	af00      	add	r7, sp, #0
 8000656:	60f8      	str	r0, [r7, #12]
 8000658:	60b9      	str	r1, [r7, #8]
 800065a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000664:	69fb      	ldr	r3, [r7, #28]
 8000666:	f1c3 0307 	rsb	r3, r3, #7
 800066a:	2b04      	cmp	r3, #4
 800066c:	bf28      	it	cs
 800066e:	2304      	movcs	r3, #4
 8000670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	3304      	adds	r3, #4
 8000676:	2b06      	cmp	r3, #6
 8000678:	d902      	bls.n	8000680 <NVIC_EncodePriority+0x30>
 800067a:	69fb      	ldr	r3, [r7, #28]
 800067c:	3b03      	subs	r3, #3
 800067e:	e000      	b.n	8000682 <NVIC_EncodePriority+0x32>
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	f04f 32ff 	mov.w	r2, #4294967295
 8000688:	69bb      	ldr	r3, [r7, #24]
 800068a:	fa02 f303 	lsl.w	r3, r2, r3
 800068e:	43da      	mvns	r2, r3
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	401a      	ands	r2, r3
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000698:	f04f 31ff 	mov.w	r1, #4294967295
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	fa01 f303 	lsl.w	r3, r1, r3
 80006a2:	43d9      	mvns	r1, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a8:	4313      	orrs	r3, r2
         );
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3724      	adds	r7, #36	@ 0x24
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
	...

080006b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3b01      	subs	r3, #1
 80006c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80006c8:	d301      	bcc.n	80006ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00f      	b.n	80006ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <SysTick_Config+0x40>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006d6:	210f      	movs	r1, #15
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f7ff ff8e 	bl	80005fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <SysTick_Config+0x40>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <SysTick_Config+0x40>)
 80006e8:	2207      	movs	r2, #7
 80006ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006ec:	2300      	movs	r3, #0
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	e000e010 	.word	0xe000e010

080006fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff ff47 	bl	8000598 <__NVIC_SetPriorityGrouping>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b086      	sub	sp, #24
 8000716:	af00      	add	r7, sp, #0
 8000718:	4603      	mov	r3, r0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000724:	f7ff ff5c 	bl	80005e0 <__NVIC_GetPriorityGrouping>
 8000728:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	68b9      	ldr	r1, [r7, #8]
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f7ff ff8e 	bl	8000650 <NVIC_EncodePriority>
 8000734:	4602      	mov	r2, r0
 8000736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff5d 	bl	80005fc <__NVIC_SetPriority>
}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff ffb0 	bl	80006b8 <SysTick_Config>
 8000758:	4603      	mov	r3, r0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f023 0307 	bic.w	r3, r3, #7
 8000770:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000772:	f043 0303 	orr.w	r3, r3, #3
 8000776:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800077a:	691b      	ldr	r3, [r3, #16]
 800077c:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <HAL_PWR_EnterSTANDBYMode+0x30>)
 800077e:	f043 0304 	orr.w	r3, r3, #4
 8000782:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000784:	bf30      	wfi
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	40007000 	.word	0x40007000
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b086      	sub	sp, #24
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80007a0:	2300      	movs	r3, #0
 80007a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80007a4:	2300      	movs	r3, #0
 80007a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d041      	beq.n	8000838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80007b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80007bc:	d02a      	beq.n	8000814 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80007be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80007c2:	d824      	bhi.n	800080e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80007c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80007c8:	d008      	beq.n	80007dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80007ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80007ce:	d81e      	bhi.n	800080e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d00a      	beq.n	80007ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80007d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80007d8:	d010      	beq.n	80007fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80007da:	e018      	b.n	800080e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80007dc:	4b86      	ldr	r3, [pc, #536]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a85      	ldr	r2, [pc, #532]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80007e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80007e8:	e015      	b.n	8000816 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 fabb 	bl	8000d6c <RCCEx_PLLSAI1_Config>
 80007f6:	4603      	mov	r3, r0
 80007f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80007fa:	e00c      	b.n	8000816 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3320      	adds	r3, #32
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f000 fba6 	bl	8000f54 <RCCEx_PLLSAI2_Config>
 8000808:	4603      	mov	r3, r0
 800080a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800080c:	e003      	b.n	8000816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800080e:	2301      	movs	r3, #1
 8000810:	74fb      	strb	r3, [r7, #19]
      break;
 8000812:	e000      	b.n	8000816 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8000814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8000816:	7cfb      	ldrb	r3, [r7, #19]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d10b      	bne.n	8000834 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800081c:	4b76      	ldr	r3, [pc, #472]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000822:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800082a:	4973      	ldr	r1, [pc, #460]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800082c:	4313      	orrs	r3, r2
 800082e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8000832:	e001      	b.n	8000838 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8000834:	7cfb      	ldrb	r3, [r7, #19]
 8000836:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000840:	2b00      	cmp	r3, #0
 8000842:	d041      	beq.n	80008c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8000848:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800084c:	d02a      	beq.n	80008a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800084e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8000852:	d824      	bhi.n	800089e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8000854:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000858:	d008      	beq.n	800086c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800085a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800085e:	d81e      	bhi.n	800089e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00a      	beq.n	800087a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8000864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000868:	d010      	beq.n	800088c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800086a:	e018      	b.n	800089e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800086c:	4b62      	ldr	r3, [pc, #392]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a61      	ldr	r2, [pc, #388]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000876:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8000878:	e015      	b.n	80008a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3304      	adds	r3, #4
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fa73 	bl	8000d6c <RCCEx_PLLSAI1_Config>
 8000886:	4603      	mov	r3, r0
 8000888:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800088a:	e00c      	b.n	80008a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3320      	adds	r3, #32
 8000890:	2100      	movs	r1, #0
 8000892:	4618      	mov	r0, r3
 8000894:	f000 fb5e 	bl	8000f54 <RCCEx_PLLSAI2_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800089c:	e003      	b.n	80008a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	74fb      	strb	r3, [r7, #19]
      break;
 80008a2:	e000      	b.n	80008a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80008a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10b      	bne.n	80008c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80008ac:	4b52      	ldr	r3, [pc, #328]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80008ba:	494f      	ldr	r1, [pc, #316]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80008bc:	4313      	orrs	r3, r2
 80008be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80008c2:	e001      	b.n	80008c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80008c4:	7cfb      	ldrb	r3, [r7, #19]
 80008c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f000 80a0 	beq.w	8000a16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80008da:	4b47      	ldr	r3, [pc, #284]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80008dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d101      	bne.n	80008ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80008e6:	2301      	movs	r3, #1
 80008e8:	e000      	b.n	80008ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80008ea:	2300      	movs	r3, #0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00d      	beq.n	800090c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	4b41      	ldr	r3, [pc, #260]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80008f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f4:	4a40      	ldr	r2, [pc, #256]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fc:	4b3e      	ldr	r3, [pc, #248]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80008fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000908:	2301      	movs	r3, #1
 800090a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800090c:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a3a      	ldr	r2, [pc, #232]	@ (80009fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000918:	f7ff fe0e 	bl	8000538 <HAL_GetTick>
 800091c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800091e:	e009      	b.n	8000934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000920:	f7ff fe0a 	bl	8000538 <HAL_GetTick>
 8000924:	4602      	mov	r2, r0
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b02      	cmp	r3, #2
 800092c:	d902      	bls.n	8000934 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800092e:	2303      	movs	r3, #3
 8000930:	74fb      	strb	r3, [r7, #19]
        break;
 8000932:	e005      	b.n	8000940 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8000934:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0ef      	beq.n	8000920 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8000940:	7cfb      	ldrb	r3, [r7, #19]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d15c      	bne.n	8000a00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8000946:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800094c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8000950:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d01f      	beq.n	8000998 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800095e:	697a      	ldr	r2, [r7, #20]
 8000960:	429a      	cmp	r2, r3
 8000962:	d019      	beq.n	8000998 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8000964:	4b24      	ldr	r3, [pc, #144]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000966:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800096a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800096e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8000970:	4b21      	ldr	r3, [pc, #132]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000976:	4a20      	ldr	r2, [pc, #128]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800097c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8000980:	4b1d      	ldr	r3, [pc, #116]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000986:	4a1c      	ldr	r2, [pc, #112]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000988:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800098c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8000990:	4a19      	ldr	r2, [pc, #100]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	f003 0301 	and.w	r3, r3, #1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d016      	beq.n	80009d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80009a2:	f7ff fdc9 	bl	8000538 <HAL_GetTick>
 80009a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80009a8:	e00b      	b.n	80009c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80009aa:	f7ff fdc5 	bl	8000538 <HAL_GetTick>
 80009ae:	4602      	mov	r2, r0
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	1ad3      	subs	r3, r2, r3
 80009b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d902      	bls.n	80009c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80009bc:	2303      	movs	r3, #3
 80009be:	74fb      	strb	r3, [r7, #19]
            break;
 80009c0:	e006      	b.n	80009d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80009c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009c8:	f003 0302 	and.w	r3, r3, #2
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0ec      	beq.n	80009aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80009d0:	7cfb      	ldrb	r3, [r7, #19]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d10c      	bne.n	80009f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80009d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80009e6:	4904      	ldr	r1, [pc, #16]	@ (80009f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80009e8:	4313      	orrs	r3, r2
 80009ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80009ee:	e009      	b.n	8000a04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80009f0:	7cfb      	ldrb	r3, [r7, #19]
 80009f2:	74bb      	strb	r3, [r7, #18]
 80009f4:	e006      	b.n	8000a04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8000a00:	7cfb      	ldrb	r3, [r7, #19]
 8000a02:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000a04:	7c7b      	ldrb	r3, [r7, #17]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d105      	bne.n	8000a16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a0a:	4b9e      	ldr	r3, [pc, #632]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0e:	4a9d      	ldr	r2, [pc, #628]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00a      	beq.n	8000a38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000a22:	4b98      	ldr	r3, [pc, #608]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a28:	f023 0203 	bic.w	r2, r3, #3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a30:	4994      	ldr	r1, [pc, #592]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a32:	4313      	orrs	r3, r2
 8000a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f003 0302 	and.w	r3, r3, #2
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d00a      	beq.n	8000a5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000a44:	4b8f      	ldr	r3, [pc, #572]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4a:	f023 020c 	bic.w	r2, r3, #12
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000a52:	498c      	ldr	r1, [pc, #560]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a54:	4313      	orrs	r3, r2
 8000a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00a      	beq.n	8000a7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8000a66:	4b87      	ldr	r3, [pc, #540]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a6c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a74:	4983      	ldr	r1, [pc, #524]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a76:	4313      	orrs	r3, r2
 8000a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f003 0308 	and.w	r3, r3, #8
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00a      	beq.n	8000a9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8000a88:	4b7e      	ldr	r3, [pc, #504]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	497b      	ldr	r1, [pc, #492]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00a      	beq.n	8000ac0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8000aaa:	4b76      	ldr	r3, [pc, #472]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ab0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ab8:	4972      	ldr	r1, [pc, #456]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000aba:	4313      	orrs	r3, r2
 8000abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00a      	beq.n	8000ae2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000acc:	4b6d      	ldr	r3, [pc, #436]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	496a      	ldr	r1, [pc, #424]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000adc:	4313      	orrs	r3, r2
 8000ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d00a      	beq.n	8000b04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8000aee:	4b65      	ldr	r3, [pc, #404]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000afc:	4961      	ldr	r1, [pc, #388]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000afe:	4313      	orrs	r3, r2
 8000b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d00a      	beq.n	8000b26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8000b10:	4b5c      	ldr	r3, [pc, #368]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b1e:	4959      	ldr	r1, [pc, #356]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b20:	4313      	orrs	r3, r2
 8000b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d00a      	beq.n	8000b48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000b32:	4b54      	ldr	r3, [pc, #336]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b40:	4950      	ldr	r1, [pc, #320]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b42:	4313      	orrs	r3, r2
 8000b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00a      	beq.n	8000b6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8000b54:	4b4b      	ldr	r3, [pc, #300]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b62:	4948      	ldr	r1, [pc, #288]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b64:	4313      	orrs	r3, r2
 8000b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d00a      	beq.n	8000b8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8000b76:	4b43      	ldr	r3, [pc, #268]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b84:	493f      	ldr	r1, [pc, #252]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d028      	beq.n	8000bea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000b98:	4b3a      	ldr	r3, [pc, #232]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000ba6:	4937      	ldr	r1, [pc, #220]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000bb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000bb6:	d106      	bne.n	8000bc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8000bb8:	4b32      	ldr	r3, [pc, #200]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	4a31      	ldr	r2, [pc, #196]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000bbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000bc2:	60d3      	str	r3, [r2, #12]
 8000bc4:	e011      	b.n	8000bea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8000bca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000bce:	d10c      	bne.n	8000bea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f8c8 	bl	8000d6c <RCCEx_PLLSAI1_Config>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8000be0:	7cfb      	ldrb	r3, [r7, #19]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8000be6:	7cfb      	ldrb	r3, [r7, #19]
 8000be8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d028      	beq.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8000bf6:	4b23      	ldr	r3, [pc, #140]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bfc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c04:	491f      	ldr	r1, [pc, #124]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000c14:	d106      	bne.n	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c18:	68db      	ldr	r3, [r3, #12]
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c20:	60d3      	str	r3, [r2, #12]
 8000c22:	e011      	b.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000c28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000c2c:	d10c      	bne.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3304      	adds	r3, #4
 8000c32:	2101      	movs	r1, #1
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f899 	bl	8000d6c <RCCEx_PLLSAI1_Config>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8000c3e:	7cfb      	ldrb	r3, [r7, #19]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8000c44:	7cfb      	ldrb	r3, [r7, #19]
 8000c46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02b      	beq.n	8000cac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c62:	4908      	ldr	r1, [pc, #32]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c64:	4313      	orrs	r3, r2
 8000c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000c72:	d109      	bne.n	8000c88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	4a02      	ldr	r2, [pc, #8]	@ (8000c84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8000c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c7e:	60d3      	str	r3, [r2, #12]
 8000c80:	e014      	b.n	8000cac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000c8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000c90:	d10c      	bne.n	8000cac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2101      	movs	r1, #1
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f000 f867 	bl	8000d6c <RCCEx_PLLSAI1_Config>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8000ca2:	7cfb      	ldrb	r3, [r7, #19]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8000ca8:	7cfb      	ldrb	r3, [r7, #19]
 8000caa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d02f      	beq.n	8000d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000cc6:	4928      	ldr	r1, [pc, #160]	@ (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000cd6:	d10d      	bne.n	8000cf4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3304      	adds	r3, #4
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f844 	bl	8000d6c <RCCEx_PLLSAI1_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8000ce8:	7cfb      	ldrb	r3, [r7, #19]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d014      	beq.n	8000d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8000cee:	7cfb      	ldrb	r3, [r7, #19]
 8000cf0:	74bb      	strb	r3, [r7, #18]
 8000cf2:	e011      	b.n	8000d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8000cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000cfc:	d10c      	bne.n	8000d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3320      	adds	r3, #32
 8000d02:	2102      	movs	r1, #2
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f925 	bl	8000f54 <RCCEx_PLLSAI2_Config>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8000d0e:	7cfb      	ldrb	r3, [r7, #19]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8000d14:	7cfb      	ldrb	r3, [r7, #19]
 8000d16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00a      	beq.n	8000d3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8000d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d56:	4904      	ldr	r1, [pc, #16]	@ (8000d68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8000d5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000

08000d6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000d7a:	4b75      	ldr	r3, [pc, #468]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d018      	beq.n	8000db8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8000d86:	4b72      	ldr	r3, [pc, #456]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000d88:	68db      	ldr	r3, [r3, #12]
 8000d8a:	f003 0203 	and.w	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d10d      	bne.n	8000db2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
       ||
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d009      	beq.n	8000db2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8000d9e:	4b6c      	ldr	r3, [pc, #432]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000da0:	68db      	ldr	r3, [r3, #12]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
       ||
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d047      	beq.n	8000e42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e044      	b.n	8000e42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d018      	beq.n	8000df2 <RCCEx_PLLSAI1_Config+0x86>
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d825      	bhi.n	8000e10 <RCCEx_PLLSAI1_Config+0xa4>
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d002      	beq.n	8000dce <RCCEx_PLLSAI1_Config+0x62>
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d009      	beq.n	8000de0 <RCCEx_PLLSAI1_Config+0x74>
 8000dcc:	e020      	b.n	8000e10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8000dce:	4b60      	ldr	r3, [pc, #384]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d11d      	bne.n	8000e16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000dde:	e01a      	b.n	8000e16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8000de0:	4b5b      	ldr	r3, [pc, #364]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d116      	bne.n	8000e1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000df0:	e013      	b.n	8000e1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8000df2:	4b57      	ldr	r3, [pc, #348]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10f      	bne.n	8000e1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000dfe:	4b54      	ldr	r3, [pc, #336]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d109      	bne.n	8000e1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8000e0e:	e006      	b.n	8000e1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
      break;
 8000e14:	e004      	b.n	8000e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8000e16:	bf00      	nop
 8000e18:	e002      	b.n	8000e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8000e1a:	bf00      	nop
 8000e1c:	e000      	b.n	8000e20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8000e1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10d      	bne.n	8000e42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8000e26:	4b4a      	ldr	r3, [pc, #296]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	430b      	orrs	r3, r1
 8000e3c:	4944      	ldr	r1, [pc, #272]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d17d      	bne.n	8000f44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8000e48:	4b41      	ldr	r3, [pc, #260]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a40      	ldr	r2, [pc, #256]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000e52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000e54:	f7ff fb70 	bl	8000538 <HAL_GetTick>
 8000e58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000e5a:	e009      	b.n	8000e70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8000e5c:	f7ff fb6c 	bl	8000538 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d902      	bls.n	8000e70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	73fb      	strb	r3, [r7, #15]
        break;
 8000e6e:	e005      	b.n	8000e7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8000e70:	4b37      	ldr	r3, [pc, #220]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1ef      	bne.n	8000e5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d160      	bne.n	8000f44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d111      	bne.n	8000eac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000e88:	4b31      	ldr	r3, [pc, #196]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8000e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6892      	ldr	r2, [r2, #8]
 8000e98:	0211      	lsls	r1, r2, #8
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	68d2      	ldr	r2, [r2, #12]
 8000e9e:	0912      	lsrs	r2, r2, #4
 8000ea0:	0452      	lsls	r2, r2, #17
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	492a      	ldr	r1, [pc, #168]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	610b      	str	r3, [r1, #16]
 8000eaa:	e027      	b.n	8000efc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d112      	bne.n	8000ed8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000eb2:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8000eba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6892      	ldr	r2, [r2, #8]
 8000ec2:	0211      	lsls	r1, r2, #8
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	6912      	ldr	r2, [r2, #16]
 8000ec8:	0852      	lsrs	r2, r2, #1
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	0552      	lsls	r2, r2, #21
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	491f      	ldr	r1, [pc, #124]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	610b      	str	r3, [r1, #16]
 8000ed6:	e011      	b.n	8000efc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8000ee0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	6892      	ldr	r2, [r2, #8]
 8000ee8:	0211      	lsls	r1, r2, #8
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6952      	ldr	r2, [r2, #20]
 8000eee:	0852      	lsrs	r2, r2, #1
 8000ef0:	3a01      	subs	r2, #1
 8000ef2:	0652      	lsls	r2, r2, #25
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	4916      	ldr	r1, [pc, #88]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000f02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f08:	f7ff fb16 	bl	8000538 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000f0e:	e009      	b.n	8000f24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8000f10:	f7ff fb12 	bl	8000538 <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d902      	bls.n	8000f24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	73fb      	strb	r3, [r7, #15]
          break;
 8000f22:	e005      	b.n	8000f30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0ef      	beq.n	8000f10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000f38:	691a      	ldr	r2, [r3, #16]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	4904      	ldr	r1, [pc, #16]	@ (8000f50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000

08000f54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8000f62:	4b6a      	ldr	r3, [pc, #424]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d018      	beq.n	8000fa0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8000f6e:	4b67      	ldr	r3, [pc, #412]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f003 0203 	and.w	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d10d      	bne.n	8000f9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
       ||
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d009      	beq.n	8000f9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8000f86:	4b61      	ldr	r3, [pc, #388]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
       ||
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d047      	beq.n	800102a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	73fb      	strb	r3, [r7, #15]
 8000f9e:	e044      	b.n	800102a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d018      	beq.n	8000fda <RCCEx_PLLSAI2_Config+0x86>
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d825      	bhi.n	8000ff8 <RCCEx_PLLSAI2_Config+0xa4>
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d002      	beq.n	8000fb6 <RCCEx_PLLSAI2_Config+0x62>
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d009      	beq.n	8000fc8 <RCCEx_PLLSAI2_Config+0x74>
 8000fb4:	e020      	b.n	8000ff8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8000fb6:	4b55      	ldr	r3, [pc, #340]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d11d      	bne.n	8000ffe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fc6:	e01a      	b.n	8000ffe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8000fc8:	4b50      	ldr	r3, [pc, #320]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d116      	bne.n	8001002 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8000fd8:	e013      	b.n	8001002 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10f      	bne.n	8001006 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8000ff6:	e006      	b.n	8001006 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8000ffc:	e004      	b.n	8001008 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8000ffe:	bf00      	nop
 8001000:	e002      	b.n	8001008 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001006:	bf00      	nop
    }

    if(status == HAL_OK)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10d      	bne.n	800102a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800100e:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6819      	ldr	r1, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	430b      	orrs	r3, r1
 8001024:	4939      	ldr	r1, [pc, #228]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001026:	4313      	orrs	r3, r2
 8001028:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d167      	bne.n	8001100 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001030:	4b36      	ldr	r3, [pc, #216]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a35      	ldr	r2, [pc, #212]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800103a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800103c:	f7ff fa7c 	bl	8000538 <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001042:	e009      	b.n	8001058 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001044:	f7ff fa78 	bl	8000538 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d902      	bls.n	8001058 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	73fb      	strb	r3, [r7, #15]
        break;
 8001056:	e005      	b.n	8001064 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001058:	4b2c      	ldr	r3, [pc, #176]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ef      	bne.n	8001044 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d14a      	bne.n	8001100 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d111      	bne.n	8001094 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001070:	4b26      	ldr	r3, [pc, #152]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6892      	ldr	r2, [r2, #8]
 8001080:	0211      	lsls	r1, r2, #8
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68d2      	ldr	r2, [r2, #12]
 8001086:	0912      	lsrs	r2, r2, #4
 8001088:	0452      	lsls	r2, r2, #17
 800108a:	430a      	orrs	r2, r1
 800108c:	491f      	ldr	r1, [pc, #124]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 800108e:	4313      	orrs	r3, r2
 8001090:	614b      	str	r3, [r1, #20]
 8001092:	e011      	b.n	80010b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001094:	4b1d      	ldr	r3, [pc, #116]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800109c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	6892      	ldr	r2, [r2, #8]
 80010a4:	0211      	lsls	r1, r2, #8
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	6912      	ldr	r2, [r2, #16]
 80010aa:	0852      	lsrs	r2, r2, #1
 80010ac:	3a01      	subs	r2, #1
 80010ae:	0652      	lsls	r2, r2, #25
 80010b0:	430a      	orrs	r2, r1
 80010b2:	4916      	ldr	r1, [pc, #88]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80010b8:	4b14      	ldr	r3, [pc, #80]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a13      	ldr	r2, [pc, #76]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 80010be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010c4:	f7ff fa38 	bl	8000538 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80010ca:	e009      	b.n	80010e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80010cc:	f7ff fa34 	bl	8000538 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d902      	bls.n	80010e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	73fb      	strb	r3, [r7, #15]
          break;
 80010de:	e005      	b.n	80010ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80010e0:	4b0a      	ldr	r3, [pc, #40]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0ef      	beq.n	80010cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d106      	bne.n	8001100 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 80010f4:	695a      	ldr	r2, [r3, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4904      	ldr	r1, [pc, #16]	@ (800110c <RCCEx_PLLSAI2_Config+0x1b8>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d079      	beq.n	8001216 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d106      	bne.n	800113c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f8cc 	bl	80002d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b10      	cmp	r3, #16
 8001150:	d058      	beq.n	8001204 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	22ca      	movs	r2, #202	@ 0xca
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2253      	movs	r2, #83	@ 0x53
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f9a4 	bl	80014b0 <RTC_EnterInitMode>
 8001168:	4603      	mov	r3, r0
 800116a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001184:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6899      	ldr	r1, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
 8001194:	431a      	orrs	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	431a      	orrs	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	68d2      	ldr	r2, [r2, #12]
 80011ac:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6919      	ldr	r1, [r3, #16]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	430a      	orrs	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f9a8 	bl	8001518 <RTC_ExitInitMode>
 80011c8:	4603      	mov	r3, r0
 80011ca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d113      	bne.n	80011fa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0203 	bic.w	r2, r2, #3
 80011e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69da      	ldr	r2, [r3, #28]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	22ff      	movs	r2, #255	@ 0xff
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
 8001202:	e001      	b.n	8001208 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d103      	bne.n	8001216 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <HAL_RTC_SetTime+0x1a>
 8001236:	2302      	movs	r3, #2
 8001238:	e08b      	b.n	8001352 <HAL_RTC_SetTime+0x132>
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2202      	movs	r2, #2
 8001246:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	22ca      	movs	r2, #202	@ 0xca
 8001250:	625a      	str	r2, [r3, #36]	@ 0x24
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2253      	movs	r2, #83	@ 0x53
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f928 	bl	80014b0 <RTC_EnterInitMode>
 8001260:	4603      	mov	r3, r0
 8001262:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8001264:	7cfb      	ldrb	r3, [r7, #19]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d163      	bne.n	8001332 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d126      	bne.n	80012be <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	2200      	movs	r2, #0
 8001282:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f983 	bl	8001594 <RTC_ByteToBcd2>
 800128e:	4603      	mov	r3, r0
 8001290:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f97c 	bl	8001594 <RTC_ByteToBcd2>
 800129c:	4603      	mov	r3, r0
 800129e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80012a0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	789b      	ldrb	r3, [r3, #2]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f974 	bl	8001594 <RTC_ByteToBcd2>
 80012ac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80012ae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	78db      	ldrb	r3, [r3, #3]
 80012b6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e018      	b.n	80012f0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	2200      	movs	r2, #0
 80012d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	785b      	ldrb	r3, [r3, #1]
 80012dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80012de:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80012e4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	78db      	ldrb	r3, [r3, #3]
 80012ea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80012fa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80012fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800130e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6899      	ldr	r1, [r3, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	431a      	orrs	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f8f5 	bl	8001518 <RTC_ExitInitMode>
 800132e:	4603      	mov	r3, r0
 8001330:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	22ff      	movs	r2, #255	@ 0xff
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800133a:	7cfb      	ldrb	r3, [r7, #19]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d103      	bne.n	8001348 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8001350:	7cfb      	ldrb	r3, [r7, #19]
}
 8001352:	4618      	mov	r0, r3
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}

0800135a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800135a:	b590      	push	{r4, r7, lr}
 800135c:	b087      	sub	sp, #28
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_RTC_SetDate+0x1a>
 8001370:	2302      	movs	r3, #2
 8001372:	e075      	b.n	8001460 <HAL_RTC_SetDate+0x106>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10e      	bne.n	80013a8 <HAL_RTC_SetDate+0x4e>
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	785b      	ldrb	r3, [r3, #1]
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d008      	beq.n	80013a8 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	785b      	ldrb	r3, [r3, #1]
 800139a:	f023 0310 	bic.w	r3, r3, #16
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	330a      	adds	r3, #10
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d11c      	bne.n	80013e8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	78db      	ldrb	r3, [r3, #3]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f8ee 	bl	8001594 <RTC_ByteToBcd2>
 80013b8:	4603      	mov	r3, r0
 80013ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	785b      	ldrb	r3, [r3, #1]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 f8e7 	bl	8001594 <RTC_ByteToBcd2>
 80013c6:	4603      	mov	r3, r0
 80013c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80013ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	789b      	ldrb	r3, [r3, #2]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f8df 	bl	8001594 <RTC_ByteToBcd2>
 80013d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80013d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80013e2:	4313      	orrs	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e00e      	b.n	8001406 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80013f4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80013fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001402:	4313      	orrs	r3, r2
 8001404:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	22ca      	movs	r2, #202	@ 0xca
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2253      	movs	r2, #83	@ 0x53
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001416:	68f8      	ldr	r0, [r7, #12]
 8001418:	f000 f84a 	bl	80014b0 <RTC_EnterInitMode>
 800141c:	4603      	mov	r3, r0
 800141e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8001420:	7cfb      	ldrb	r3, [r7, #19]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8001430:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001434:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f000 f86e 	bl	8001518 <RTC_ExitInitMode>
 800143c:	4603      	mov	r3, r0
 800143e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	22ff      	movs	r2, #255	@ 0xff
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001448:	7cfb      	ldrb	r3, [r7, #19]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d103      	bne.n	8001456 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800145e:	7cfb      	ldrb	r3, [r7, #19]
}
 8001460:	4618      	mov	r0, r3
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd90      	pop	{r4, r7, pc}

08001468 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <HAL_RTC_WaitForSynchro+0x44>)
 8001476:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8001478:	f7ff f85e 	bl	8000538 <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800147e:	e009      	b.n	8001494 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001480:	f7ff f85a 	bl	8000538 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800148e:	d901      	bls.n	8001494 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e007      	b.n	80014a4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	68db      	ldr	r3, [r3, #12]
 800149a:	f003 0320 	and.w	r3, r3, #32
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0ee      	beq.n	8001480 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	0003ff5f 	.word	0x0003ff5f

080014b0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d120      	bne.n	800150c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f04f 32ff 	mov.w	r2, #4294967295
 80014d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80014d4:	f7ff f830 	bl	8000538 <HAL_GetTick>
 80014d8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80014da:	e00d      	b.n	80014f8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80014dc:	f7ff f82c 	bl	8000538 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014ea:	d905      	bls.n	80014f8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d102      	bne.n	800150c <RTC_EnterInitMode+0x5c>
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b03      	cmp	r3, #3
 800150a:	d1e7      	bne.n	80014dc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800150c:	7bfb      	ldrb	r3, [r7, #15]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8001524:	4b1a      	ldr	r3, [pc, #104]	@ (8001590 <RTC_ExitInitMode+0x78>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	4a19      	ldr	r2, [pc, #100]	@ (8001590 <RTC_ExitInitMode+0x78>)
 800152a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800152e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001530:	4b17      	ldr	r3, [pc, #92]	@ (8001590 <RTC_ExitInitMode+0x78>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0320 	and.w	r3, r3, #32
 8001538:	2b00      	cmp	r3, #0
 800153a:	d10c      	bne.n	8001556 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ff93 	bl	8001468 <HAL_RTC_WaitForSynchro>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d01e      	beq.n	8001586 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e017      	b.n	8001586 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <RTC_ExitInitMode+0x78>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <RTC_ExitInitMode+0x78>)
 800155c:	f023 0320 	bic.w	r3, r3, #32
 8001560:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff ff80 	bl	8001468 <HAL_RTC_WaitForSynchro>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2203      	movs	r2, #3
 8001572:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <RTC_ExitInitMode+0x78>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <RTC_ExitInitMode+0x78>)
 8001580:	f043 0320 	orr.w	r3, r3, #32
 8001584:	6093      	str	r3, [r2, #8]
  }

  return status;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40002800 	.word	0x40002800

08001594 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80015a6:	e005      	b.n	80015b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80015ae:	7afb      	ldrb	r3, [r7, #11]
 80015b0:	3b0a      	subs	r3, #10
 80015b2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80015b4:	7afb      	ldrb	r3, [r7, #11]
 80015b6:	2b09      	cmp	r3, #9
 80015b8:	d8f6      	bhi.n	80015a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b2db      	uxtb	r3, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e07f      	b.n	80016ee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2202      	movs	r2, #2
 80015fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	22ca      	movs	r2, #202	@ 0xca
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2253      	movs	r2, #83	@ 0x53
 800160c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800161c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800162e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800163a:	2b00      	cmp	r3, #0
 800163c:	d120      	bne.n	8001680 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800163e:	f7fe ff7b 	bl	8000538 <HAL_GetTick>
 8001642:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8001644:	e015      	b.n	8001672 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001646:	f7fe ff77 	bl	8000538 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001654:	d90d      	bls.n	8001672 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	22ff      	movs	r2, #255	@ 0xff
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2203      	movs	r2, #3
 8001662:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e03d      	b.n	80016ee <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	f003 0304 	and.w	r3, r3, #4
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0e2      	beq.n	8001646 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 0107 	bic.w	r1, r3, #7
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	430a      	orrs	r2, r1
 800169a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800169c:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a15      	ldr	r2, [pc, #84]	@ (80016f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80016a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80016ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016b2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016c2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80016d2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	22ff      	movs	r2, #255	@ 0xff
 80016da:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d101      	bne.n	8001712 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 800170e:	2302      	movs	r3, #2
 8001710:	e04d      	b.n	80017ae <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2202      	movs	r2, #2
 800171e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	22ca      	movs	r2, #202	@ 0xca
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2253      	movs	r2, #83	@ 0x53
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001740:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001750:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 8001752:	f7fe fef1 	bl	8000538 <HAL_GetTick>
 8001756:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8001758:	e015      	b.n	8001786 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800175a:	f7fe feed 	bl	8000538 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001768:	d90d      	bls.n	8001786 <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	22ff      	movs	r2, #255	@ 0xff
 8001770:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2203      	movs	r2, #3
 8001776:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e013      	b.n	80017ae <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0e2      	beq.n	800175a <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	22ff      	movs	r2, #255	@ 0xff
 800179a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2201      	movs	r2, #1
 80017a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <memset>:
 80017b6:	4402      	add	r2, r0
 80017b8:	4603      	mov	r3, r0
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d100      	bne.n	80017c0 <memset+0xa>
 80017be:	4770      	bx	lr
 80017c0:	f803 1b01 	strb.w	r1, [r3], #1
 80017c4:	e7f9      	b.n	80017ba <memset+0x4>
	...

080017c8 <__libc_init_array>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	4d0d      	ldr	r5, [pc, #52]	@ (8001800 <__libc_init_array+0x38>)
 80017cc:	4c0d      	ldr	r4, [pc, #52]	@ (8001804 <__libc_init_array+0x3c>)
 80017ce:	1b64      	subs	r4, r4, r5
 80017d0:	10a4      	asrs	r4, r4, #2
 80017d2:	2600      	movs	r6, #0
 80017d4:	42a6      	cmp	r6, r4
 80017d6:	d109      	bne.n	80017ec <__libc_init_array+0x24>
 80017d8:	4d0b      	ldr	r5, [pc, #44]	@ (8001808 <__libc_init_array+0x40>)
 80017da:	4c0c      	ldr	r4, [pc, #48]	@ (800180c <__libc_init_array+0x44>)
 80017dc:	f000 f818 	bl	8001810 <_init>
 80017e0:	1b64      	subs	r4, r4, r5
 80017e2:	10a4      	asrs	r4, r4, #2
 80017e4:	2600      	movs	r6, #0
 80017e6:	42a6      	cmp	r6, r4
 80017e8:	d105      	bne.n	80017f6 <__libc_init_array+0x2e>
 80017ea:	bd70      	pop	{r4, r5, r6, pc}
 80017ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80017f0:	4798      	blx	r3
 80017f2:	3601      	adds	r6, #1
 80017f4:	e7ee      	b.n	80017d4 <__libc_init_array+0xc>
 80017f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80017fa:	4798      	blx	r3
 80017fc:	3601      	adds	r6, #1
 80017fe:	e7f2      	b.n	80017e6 <__libc_init_array+0x1e>
 8001800:	08001828 	.word	0x08001828
 8001804:	08001828 	.word	0x08001828
 8001808:	08001828 	.word	0x08001828
 800180c:	0800182c 	.word	0x0800182c

08001810 <_init>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr

0800181c <_fini>:
 800181c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181e:	bf00      	nop
 8001820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001822:	bc08      	pop	{r3}
 8001824:	469e      	mov	lr, r3
 8001826:	4770      	bx	lr
